pragma solidity ^0.5.17;
  
contract shop
{ 
    address payable owner;
    uint iud = 1;
    uint count = 0;
    mapping (uint => product) Product;
    product[] pro;
      
    struct product
    {
        uint id;
        address seller;
        string name;
        uint price;
        uint quantity;
        string status;
    }
    
    constructor() public
    {
        owner = msg.sender;
    }
    
    
    function addProduct(string memory _name, uint _price, uint _quantity, string memory _status) public
    {
        Product[iud] = product(iud, msg.sender, _name, _price, _quantity, _status);
        iud++;
    }
    
    function getProduct(uint _id) public view returns(uint, address, string memory, uint, uint, string memory)
    {
        return (pro[_id-1].id, pro[_id-1].seller, pro[_id-1].name,  pro[_id-1].price, pro[_id-1].quantity, pro[_id-1].status);
    }
    
    
    function loadingProducts() public
    {
        pro.length = 0;
        for(uint i = 1; i < iud; i++)
        {
            if(Product[i].id!=0)
            {
                pro.push(Product[i]);
            }
        }
    }
    
    function removeProduct(uint _id) public 
    {
        delete Product[_id];
        delete pro[_id-1];
    }
    
    function buyProduct(uint _id, uint _qty) payable external
    {
        uint cost = Product[_id].price * _qty;
        require(cost==msg.value, "Check the payment...!");
        owner.transfer(msg.value);
        Product[_id].quantity = Product[_id].quantity - _qty;
        if(Product[_id].quantity==0)
        {
            Product[_id].status = "Sold Out";
        }
    }
}
